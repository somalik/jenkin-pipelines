pipeline {
    agent {
  kubernetes {
    yaml '''
    spec:
        containers:
        - name: maven
          image: maven:3.6.3-openjdk-11
          command:
          - sleep
          args:
          - infinity
          volumeMounts:
          - name: maven-cache
            mountPath: /root/.m2
          lifecycle:
            postStart:
              exec:
                command:
                - sh
                - -c
                - apt-get update && apt-get install -y git
        volumes:
        - name: maven-cache
          PersistentVolumeClaim:
            claimName: maven-n
          '''
  }
}
    environment {
        // Store the SSH credentials as a Jenkins credential and reference it
        REMOTE_HOST = '172.16.1.81'
        REMOTE_USER = 'admin'
      
        DEPLOY_PATH = '/data1/wso2/mi/server/carbonapps/'
    }

    stages {
        stage('Select Branch') {
            steps {
                script {
                    // Define the branches available for selection
                    def branches = ['develop', 'stress_test', 'none']  // Update this list with actual branches
                    
                    // Ask the user to select a branch
                    env.G_BRANCH = input(
                        id: 'userInput', 
                        message: 'Select the branch you want to build', 
                        parameters: [choice(name: 'BRANCH', choices: branches.join('\n'), description: 'Choose a branch to proceed')]
                    )
                    
                    echo "Selected branch: ${env.G_BRANCH}"
                }
            }
        }
              stage('Checkout Source') {
       steps{

          git branch: "${env.G_BRANCH}", credentialsId: 'aksasohail', url: 'http://10.0.0.232:8080/tfs/TFSCollection/LMS_WSO2/_git/LMS_WSO2_CommonService'
    //    sh 'git config --global --add safe.directory /var/lib/jenkins/workspace/PTML-ONIC/IdentityServer'      
                script {
                 env.GIT_HASH = sh(
                     script: "git rev-parse --short HEAD",
                     returnStdout: true
                     ).trim()
                 env.GIT_BRANCH = sh (
                     script: "git rev-parse --abbrev-ref HEAD",
                     returnStdout: true
                     ).trim()
         //         sh "cd Service_Logging"
                  sh "ls"
         //         env.APP_VER = "13.0"
                 env.APP_VER = sh (
                     script: " grep -m1 -oP '(?<=<version>).*(?=<\\/version>)' Service_Logging/pom.xml",
                     returnStdout: true
                     ).trim()
                     echo "$APP_VER"
    

                    // Combine all into a build tag
    env.BUILD_TAG = "${env.APP_VER}-${env.G_BRANCH}-${env.BUILD_NUMBER}-${env.GIT_HASH}"
    
    // Print the build tag
    echo "Build tag: ${env.BUILD_TAG}"
             
                }

                }

        }
         stage('Build CAR') {
            steps {
                container('maven'){
                script {
                    sh '''
                    pwd
                    cd Service_Logging/
                    pwd
                    mvn clean install -DskipTests
                    '''
                    sh '''
                    pwd
                    cd Service_Logging/Service_LoggingCompositeExporter/target
                    mv Service_Logging*.car Service_Logging-${BUILD_TAG}.car
                    ls
                    '''
                }
                
            }
        }
}
stage('Deploy') {
    steps {
        container('maven') {
            script {
                // Define the path of the generated artifact
                def artifactPath = "target/Service_Logging-${BUILD_TAG}.car"
                
                // Use the Jenkins credentials ID for SSH
                sshagent(credentials: ['jenkins_deploy']) {    
                    // Use SSH and SCP to copy the file to the remote server
                    sh """
                    # List the current files and print the working directory
                    ls
                    pwd
                    ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'rm -f ${DEPLOY_PATH}/Service_Logging*.car'
                    # SSH into the remote server and delete the old .car files


                    # Wait for 30 seconds before continuing
                    sleep 30

                    # Copy the new artifact to the remote server
                    scp -o StrictHostKeyChecking=no Service_Logging/Service_LoggingCompositeExporter/target/Service_Logging-${BUILD_TAG}.car ${REMOTE_USER}@${REMOTE_HOST}:${DEPLOY_PATH}
                    """
                }
            }
        }
    }
}    }
}

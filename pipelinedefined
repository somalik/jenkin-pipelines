pipeline {
    agent {              // define an agent on which pipeline executes or empty for default run on master 
        label 'linux-mvn'
    }
    environment {       // all variables used in the pipeline should be defined here

        APP_NAME = 'Service_Product'
        DEV_SERVER = '172.16.1.13'
    }
####################################################################3
#####################################################################

       stages {

           
           stage('Select Branch') {       // branches are defined to so that users can select the branch to build
            steps {
                script {
                    // Define the branches available for selection
                    def branches = ['develop', 'Feature/SerilogDB', 'main']  // Update this list with actual branches
                    
                    // Ask the user to select a branch
                    env.G_BRANCH = input(
                        id: 'userInput', 
                        message: 'Select the branch you want to build', 
                        parameters: [choice(name: 'BRANCH', choices: branches.join('\n'), description: 'Choose a branch to proceed')]
                    )
                    
                    echo "Selected branch: ${env.G_BRANCH}"
                }
            }
        }

####################################################################3
#####################################################################

        stage('Checkout Source') {
       steps{
         
           sh 'rm -rf *'
           sh 'sleep 2'     // below code checkout is done
          git branch: "${env.G_BRANCH}", credentialsId: 'aksasohail', url: 'http://10.0.0.232:8080/tfs/TFSCollection/LMS_WSO2/_git/LMS_WSO2_ProductService'
    //    sh 'git config --global --add safe.directory /var/lib/jenkins/workspace/PTML-ONIC/IdentityServer'      
                script {
                 env.GIT_HASH = sh(                                      //get the git commit hash 
                     script: "git rev-parse --short HEAD",
                     returnStdout: true
                     ).trim()
                 env.GIT_BRANCH = sh (                                    // get branch which is going to be build
                     script: "git rev-parse --abbrev-ref HEAD",
                     returnStdout: true
                     ).trim()
                   env.APP_VER = "13.0"                 //version is hardcoded just for testing 
           //      env.APP_VER = sh (                   // app version is get from the csproj file
        //             script: " grep -m1 -oP '(?<=<AssemblyVersion>).*(?=<\\/AssemblyVersion>)' ${env.APP_NAME}.csproj",
          //           returnStdout: true
        //             ).trim()
                     echo "$APP_VER"
     echo "${APP_VER}-${GIT_BRANCH}-${BUILD_NUMBER}-${GIT_HASH} "
                
     // Combine all into a build tag
     env.BUILD_TAG = "${env.APP_VER}-stg-${env.BUILD_NUMBER}-${env.GIT_HASH}"
    
    // Print the build tag
    echo "Build tag: ${env.BUILD_TAG}"
                    }
                }
        }

####################################################################3
Maven build Micro Integrator    //   to build car file with maven for MI WSO2 
#####################################################################

         stage('Build WAR') {
            steps {
                script {
                    sh '''
                    cd Service_Product/
                    mvn clean install -DskipTests
                    '''
                    sh '''
                    cd Service_Product/Service_ProductCompositeExporter/target
                    mv Service_ProductCompositeExporter_1.0.0-SNAPSHOT.car ${APP_NAME}-${BUILD_TAG}.car
                    '''
                }
              }
        }
 ####################################################################3
move artifact to the remote server

ssh publish plugin needed (and configure server IP username password and remote directory)
#####################################################################       
         stage("Move to App Server"){
         steps{
             dir("/var/lib/jenkins/workspace/LMS-WSO2/Product_Service/Service_Product/Service_ProductCompositeExporter/target") {
                script{
               sshPublisher(
                   continueOnError: false, failOnError: true,
                     publishers: [
                        sshPublisherDesc(
                            configName: 'lms-wso2-stg', 
                            transfers: [
                            sshTransfer(cleanRemote: true,
                            excludes: '',
                            execCommand: 'pwd',
                            execTimeout: 120000,
                            flatten: false,
                            makeEmptyDirs: false,
                            noDefaultExcludes: false,
                            patternSeparator: '[, ]+',
                            remoteDirectory: 'Service_Product/',
                            remoteDirectorySDF: false,
                            removePrefix: '',
                            sourceFiles: "${APP_NAME}-${BUILD_TAG}.car")],
                        //    sourceFiles: '*')],
                            usePromotionTimestamp: false,
                            useWorkspaceInPromotion: false,
                            verbose: true)]) 
                   }
                }
            }
         } 
